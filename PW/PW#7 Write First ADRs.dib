#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# ПЗ №7. Записать первые Architectural Decision Records.

**Цель:**  
После выполнения задания Вы:  
1. Научитесь фиксировать Architectural Decision Records (ADR).
2. Получите наиболее значимые ADR, принятые на данном этапе для проекта

**Architectural Decision Record** - это запись о принятии архитектурного решения.

Пользуясь определением Фаулера, **архитектура** - это решения, которые трудно изменить, получаем, что ADR - это фиксация наиболее значимых проектных решений.

Их стоит фиксировать, чтобы
- в любой момент посомтреть причины принятия решения. Разработка ПО - процесс длительный и те факторы, которые побудили к принятию того или иного решения могут перестать существовать во время жизненного цикла проекта. Иногда прихожится пересматривать решения, а ADR поможет сделать это более осознанно.
- передача знаний внутри команды. Состав команды может меняться, поэтому ADR помогают не потерять важную информацию.

#!markdown

## Структура ADR

Каждая ADR фиксируется отдельным текстовым документом. Нет какого-то строго стандарта на структуру этого документа - он делается не для галочки, а чтобы быть ползеным для команды. Мы будем пользоваться следующим форматом:

**Заголовок:** Содержит уникальный номер принятого решения. Уникальный номер нужен для точной ссылки на документ.

**Дата:** Дата принятия решения

**Контекст:** Проблемы, требования, ограничения и другие факторы, которые были учтены при выборе решения.

**Решение:** Принятое решение. Может включать конкретные технологии, паттерны,  подходы.

**Последствия:** Может включать в себя плюсы и минусы выбранного решения, потенциальные проблемы, воздействие на существующие системы или процессы.

**Альтернативы:** Может включать преимущества и недостатки каждой альтернативы, причины выбора решения.

**Ссылки:** Внешние ресурсы (статьи, исследования, и т.д.).

**Статус:** Некоторые ADR готовтся не 10 минут, некоторые могут находиться в поцессе реализации, а некоторые могут утратить свою актуальность. Чтобы отичать действущий ADR от других, стоит указаывать статус документа.

## Пример ADR.

**AD №001.** Выбор базы данных для приложения Redirector

**Дата:** 15.03.2023

**Контекст:** Основной вид запросов в приложении Redirector - получение редиректа на умную ссылку.

**Решение:** MongoDB

**Последствия:** Приложение Editor должно обновлять базу данных Redirector при редактировании правил редиректа для умной ссылки, скорее всего Editor будет построено на основе реляционной базы данных и придется обеспечивать согласованность данных в двух разных СУБД.  

**Альтернативы:** PostgreSQL. 

В Redirector основным запросом в БД будет выборка правил редиректа по slug. Не будет никаких запросов, которые изменяют состояние. Значит транзакции не нужны, а вот горизонтальное масштабирование при изменении числа запросов важно. Ожидается, что правил редиректа в среднем будет 3-5, то есть небольшое количество, а потому их  удобно представить в виде одного документа, что потенциально будет быстрее, чем выборка правил в виде отдельных записей в таблице. MongoDB поддерживает из коробки репликацию и шардирование.

**Ссылки:** Репликация - https://www.mongodb.com/docs/manual/replication/, шардирование - https://www.mongodb.com/docs/manual/sharding/

**Статус:** **Done.**

## Задание

**!Примечание** Перед тем как приступать к выполнению, прочитайте все задание.

1. Создать ветку для фиксации ADR с именем First-ADRs.

Не забываем сначала убедиться, что у Вас нет не зафиксированных изменений в Git. Если есть, то либо фиксируем, либо делаем git stash. Затем выполняем команды:

#!pwsh

git checkout main
git pull origin main
git checkout -b First-ADRs

#!markdown

2. Создать папку в репозитории на том же уровне, где находится SmartLinks, с именем ADRs
3. Записать ADR о:
- Разделении приложения SmartLinks на Redirector и Editor. Эта запись о применении CQRS паттерна.
- Выборе MongoDB для разработки приложения Redirector. Это решении основывается на предыдущем. То есть в контексте необходимо это тоже отразить.
- Применении Service Repository паттерна в контроллерах и middleware из-за асинхронных операций.
- Обработке каждого статуса http-ответа в отдельном middleware.

4. Каждая ADR в отдельном файле.

Каждый **ADR** оформляем отдельным коммитом**, в сообщении **пишем заголовок ADR**.

5. После того, как написаны ADR офрмляем PR в удаленный репозиторий. PR принимаете сами. Не надо делать Squash при мердже - пусть каждое ADR останется в истории коммитов отдельным комиитом.

**!Примечание** Для описания разделов Последствия и Альтернативы Вам понадобится поискпть дополгительные материалы (все ссылки, что использовали при принятии решения, необоходимо отразить в разделе Ссылки.), возможно, пригодится [запись занятия, где разбирали ADR](https://youtu.be/l9nGNjXJuKU)
